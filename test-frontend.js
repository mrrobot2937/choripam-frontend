// Script para probar el frontend
const testFrontend = async () => {
  console.log('üîç Probando el frontend...');
  
  try {
    // Test 1: Verificar que el servidor de desarrollo se puede iniciar
    console.log('\n1Ô∏è‚É£ Verificando configuraci√≥n del frontend...');
    
    const fs = require('fs');
    const path = require('path');
    
    // Verificar archivos importantes
    const importantFiles = [
      'package.json',
      'next.config.ts',
      'src/lib/apollo-client.ts',
      'env.config.js'
    ];
    
    for (const file of importantFiles) {
      if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} existe`);
      } else {
        console.log(`‚ùå ${file} no existe`);
      }
    }
    
    // Verificar configuraci√≥n de GraphQL
    const apolloConfig = fs.readFileSync('src/lib/apollo-client.ts', 'utf8');
    if (apolloConfig.includes('import config from') && apolloConfig.includes('config.GRAPHQL_URL')) {
      console.log('‚úÖ Cliente Apollo configurado para usar configuraci√≥n externa');
    } else {
      console.log('‚ùå Cliente Apollo no est√° configurado correctamente');
    }
    
    // Verificar configuraci√≥n de entorno
    const envConfig = fs.readFileSync('env.config.js', 'utf8');
    if (envConfig.includes('choripam-backend-real-4o8ibxnaq-david-leons-projects-e6b66126.vercel.app')) {
      console.log('‚úÖ Configuraci√≥n de entorno correcta');
    } else {
      console.log('‚ùå Configuraci√≥n de entorno incorrecta');
    }
    
    console.log('\n2Ô∏è‚É£ Frontend configurado correctamente');
    console.log('üöÄ Para iniciar el servidor de desarrollo:');
    console.log('   npm run dev');
    console.log('\nüì± El frontend estar√° disponible en: http://localhost:3000');
    console.log('üîß Panel de administraci√≥n: http://localhost:3000/admin');
    
  } catch (error) {
    console.error('‚ùå Error probando el frontend:', error);
  }
};

// Ejecutar la prueba
testFrontend(); 